{
  "uid" : "51f1a366c5ed2804",
  "name" : "test012日报表查询",
  "fullName" : "testcase.Test_excel_case.TestExcel#test_run",
  "historyId" : "69bf22278eff15ec5f9adb3d6426a165",
  "time" : {
    "start" : 1609726729862,
    "stop" : 1609726729971,
    "duration" : 109
  },
  "description" : "<font color='red'>请求URL: </font> http://192.168.40.234:5000/action.ashx?action=GetReportName<Br/><font color='red'>请求类型: </font>POST<Br/><font color='red'>期望结果: </font>(日报表)test182020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 16}<Br/><font color='red'>实际结果: </font>{'code': 200, 'body': {'ActionInfo': {'ErrorCode': 0, 'Success': True, 'ExceptionMsg': None, 'ActionName': None, 'ActionUser': None, 'ActionTime': '/Date(1609726729908+0800)/', 'LogType': 0, 'ActionDateTime': '/Date(1609726729939+0800)/', 'ActionModel': None, 'LogParams': None, 'FunctionPoint': None}, 'ReportList': [{'Id': 12, 'CName': 'test01', 'Desp': '(日报表)test012020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 13, 'CName': 'test02', 'Desp': '(日报表)test022020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 14, 'CName': 'test03', 'Desp': '(日报表)test032020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 15, 'CName': 'test04', 'Desp': '(日报表)test042020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 16, 'CName': 'test05', 'Desp': '(日报表)test052020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 17, 'CName': 'test06', 'Desp': '(日报表)test062020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 18, 'CName': 'test07', 'Desp': '(日报表)test072020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 19, 'CName': 'test08', 'Desp': '(日报表)test082020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 20, 'CName': 'test09', 'Desp': '(日报表)test092020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 22, 'CName': 'test10', 'Desp': '(日报表)test102020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 23, 'CName': 'test11', 'Desp': '(日报表)test112020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 24, 'CName': 'test12', 'Desp': '(日报表)test122020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 25, 'CName': 'test13', 'Desp': '(日报表)test132020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 26, 'CName': 'test14', 'Desp': '(日报表)test142020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 27, 'CName': 'test15', 'Desp': '(日报表)test152020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 15}}}",
  "descriptionHtml" : "<p><font color='red'>请求URL: </font> http://192.168.40.234:5000/action.ashx?action=GetReportName<Br/><font color='red'>请求类型: </font>POST<Br/><font color='red'>期望结果: </font>(日报表)test182020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 16}<Br/><font color='red'>实际结果: </font>{'code': 200, 'body': {'ActionInfo': {'ErrorCode': 0, 'Success': True, 'ExceptionMsg': None, 'ActionName': None, 'ActionUser': None, 'ActionTime': '/Date(1609726729908+0800)/', 'LogType': 0, 'ActionDateTime': '/Date(1609726729939+0800)/', 'ActionModel': None, 'LogParams': None, 'FunctionPoint': None}, 'ReportList': [{'Id': 12, 'CName': 'test01', 'Desp': '(日报表)test012020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 13, 'CName': 'test02', 'Desp': '(日报表)test022020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 14, 'CName': 'test03', 'Desp': '(日报表)test032020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 15, 'CName': 'test04', 'Desp': '(日报表)test042020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 16, 'CName': 'test05', 'Desp': '(日报表)test052020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 17, 'CName': 'test06', 'Desp': '(日报表)test062020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 18, 'CName': 'test07', 'Desp': '(日报表)test072020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 19, 'CName': 'test08', 'Desp': '(日报表)test082020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 20, 'CName': 'test09', 'Desp': '(日报表)test092020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 22, 'CName': 'test10', 'Desp': '(日报表)test102020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 23, 'CName': 'test11', 'Desp': '(日报表)test112020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 24, 'CName': 'test12', 'Desp': '(日报表)test122020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 25, 'CName': 'test13', 'Desp': '(日报表)test132020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 26, 'CName': 'test14', 'Desp': '(日报表)test142020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 27, 'CName': 'test15', 'Desp': '(日报表)test152020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 15}}}</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <testcase.Test_excel_case.TestExcel object at 0x0000008AB0185C50>\ncase = {'cookies': '', 'headers': '', '前置条件': '', '备注': '', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n        # 3、重构函数内容\n        data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例key获取values\n        url = ConfigYaml().get_conf_url() + case[data_key.url]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        status_code = case[data_key.status_code]\n        db_verify = case[data_key.db_verify]\n    \n        # 2）.接口请求\n        request = Request()\n        # params 转义json\n        # 验证params有没有内容\n        if len(str(params).strip()) is not 0:\n            params = json.loads(params)\n        # headers 转义json\n        # 验证headers有没有内容\n        if len(str(headers).strip()) is not 0:\n            headers = json.loads(headers)\n        # cookies 转义json\n        # 验证cookies有没有内容\n        if len(str(cookies).strip()) is not 0:\n            cookies = json.loads(cookies)\n    \n        # method post/get\n        if str(method).lower() == \"get\":\n            res = request.get(url, data=params, headers=headers, cookies=cookies)\n    \n        elif str(method).lower() == \"post\":\n            res = request.post(url, data=params, headers=headers, cookies=cookies)\n    \n        else:\n            res = log.error(\"错误请求method: %s\" % method)\n        print(res)\n    \n        # allure\n        # sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        # 模块   story 二级标签\n        allure.dynamic.story(case_model)\n        # 用例ID+接口名称  title\n        allure.dynamic.title(case_id + case_name)\n        # 请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(url, method, expect_result, res)\n        allure.dynamic.description(desc)\n    \n        # 断言验证\n        # 状态码，返回结果内容，数据库相关的结果的验证\n        # 状态码\n        assert_util = AssertUtil()\n        assert_util.assert_code(res[\"code\"], status_code)\n    \n        # 返回结果内容\n>       assert_util.assert_in_body(str(res[\"body\"]), str(expect_result))\n\nTest_excel_case.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUtil.AssertUtil object at 0x0000008AB05A9320>\nbody = \"{'ActionInfo': {'ErrorCode': 0, 'Success': True, 'ExceptionMsg': None, 'ActionName': None, 'ActionUser': None, 'Actio...'test15', 'Desp': '(日报表)test152020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 15}}\"\nexpected_body = \"(日报表)test182020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 16}\"\n\n    def assert_in_body(self, body, expected_body):\n        \"\"\"\n        验证返回结果是否包含期望的结果\n        :param body:\n        :param expected_body:\n        :return:\n        \"\"\"\n        try:\n            body = str(body)\n            # print(body)\n>           assert expected_body in body\nE           AssertionError\n\n..\\utils\\AssertUtil.py:54: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "<font color='red'>请求URL: </font> http://192.168.40.234:5000/action.ashx?action=GetReportName<Br/><font color='red'>请求类型: </font>POST<Br/><font color='red'>期望结果: </font>(日报表)test182020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 16}<Br/><font color='red'>实际结果: </font>{'code': 200, 'body': {'ActionInfo': {'ErrorCode': 0, 'Success': True, 'ExceptionMsg': None, 'ActionName': None, 'ActionUser': None, 'ActionTime': '/Date(1609726729908+0800)/', 'LogType': 0, 'ActionDateTime': '/Date(1609726729939+0800)/', 'ActionModel': None, 'LogParams': None, 'FunctionPoint': None}, 'ReportList': [{'Id': 12, 'CName': 'test01', 'Desp': '(日报表)test012020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 13, 'CName': 'test02', 'Desp': '(日报表)test022020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 14, 'CName': 'test03', 'Desp': '(日报表)test032020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 15, 'CName': 'test04', 'Desp': '(日报表)test042020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 16, 'CName': 'test05', 'Desp': '(日报表)test052020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 17, 'CName': 'test06', 'Desp': '(日报表)test062020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 18, 'CName': 'test07', 'Desp': '(日报表)test072020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 19, 'CName': 'test08', 'Desp': '(日报表)test082020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 20, 'CName': 'test09', 'Desp': '(日报表)test092020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 22, 'CName': 'test10', 'Desp': '(日报表)test102020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 23, 'CName': 'test11', 'Desp': '(日报表)test112020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 24, 'CName': 'test12', 'Desp': '(日报表)test122020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 25, 'CName': 'test13', 'Desp': '(日报表)test132020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 26, 'CName': 'test14', 'Desp': '(日报表)test142020-09-01', 'ReportType': 1, 'RoleNo': None}, {'Id': 27, 'CName': 'test15', 'Desp': '(日报表)test152020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 15}}}",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <testcase.Test_excel_case.TestExcel object at 0x0000008AB0185C50>\ncase = {'cookies': '', 'headers': '', '前置条件': '', '备注': '', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n        # 3、重构函数内容\n        data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例key获取values\n        url = ConfigYaml().get_conf_url() + case[data_key.url]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        status_code = case[data_key.status_code]\n        db_verify = case[data_key.db_verify]\n    \n        # 2）.接口请求\n        request = Request()\n        # params 转义json\n        # 验证params有没有内容\n        if len(str(params).strip()) is not 0:\n            params = json.loads(params)\n        # headers 转义json\n        # 验证headers有没有内容\n        if len(str(headers).strip()) is not 0:\n            headers = json.loads(headers)\n        # cookies 转义json\n        # 验证cookies有没有内容\n        if len(str(cookies).strip()) is not 0:\n            cookies = json.loads(cookies)\n    \n        # method post/get\n        if str(method).lower() == \"get\":\n            res = request.get(url, data=params, headers=headers, cookies=cookies)\n    \n        elif str(method).lower() == \"post\":\n            res = request.post(url, data=params, headers=headers, cookies=cookies)\n    \n        else:\n            res = log.error(\"错误请求method: %s\" % method)\n        print(res)\n    \n        # allure\n        # sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        # 模块   story 二级标签\n        allure.dynamic.story(case_model)\n        # 用例ID+接口名称  title\n        allure.dynamic.title(case_id + case_name)\n        # 请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(url, method, expect_result, res)\n        allure.dynamic.description(desc)\n    \n        # 断言验证\n        # 状态码，返回结果内容，数据库相关的结果的验证\n        # 状态码\n        assert_util = AssertUtil()\n        assert_util.assert_code(res[\"code\"], status_code)\n    \n        # 返回结果内容\n>       assert_util.assert_in_body(str(res[\"body\"]), str(expect_result))\n\nTest_excel_case.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUtil.AssertUtil object at 0x0000008AB05A9320>\nbody = \"{'ActionInfo': {'ErrorCode': 0, 'Success': True, 'ExceptionMsg': None, 'ActionName': None, 'ActionUser': None, 'Actio...'test15', 'Desp': '(日报表)test152020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 15}}\"\nexpected_body = \"(日报表)test182020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 16}\"\n\n    def assert_in_body(self, body, expected_body):\n        \"\"\"\n        验证返回结果是否包含期望的结果\n        :param body:\n        :param expected_body:\n        :return:\n        \"\"\"\n        try:\n            body = str(body)\n            # print(body)\n>           assert expected_body in body\nE           AssertionError\n\n..\\utils\\AssertUtil.py:54: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f9b80fd29ed4854a",
      "name" : "log",
      "source" : "f9b80fd29ed4854a.txt",
      "type" : "text/plain",
      "size" : 2133
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "IMS前台接口自动化测试"
  }, {
    "name" : "story",
    "value" : "报表管理"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "Test_excel_case"
  }, {
    "name" : "subSuite",
    "value" : "TestExcel"
  }, {
    "name" : "host",
    "value" : "IMSIMS"
  }, {
    "name" : "thread",
    "value" : "11724-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.Test_excel_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'用例ID': 'test012', '模块': '报表管理', '接口名称': '日报表查询', '请求URL': '/action.ashx?action=GetReportName', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'JSON', '请求参数': '{\"Inputs\":\"{UserName:\\'admin\\',DateTime:\\'2020.09.01\\',Unite:1}\"}', '预期结果': \"(日报表)test182020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 16}\", '实际结果': '', '是否运行': 'y', 'headers': '', 'cookies': '', '返回状态码': '200', '数据库验证': '', '备注': ''}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "dce17b0f26f46ad2",
      "status" : "passed",
      "time" : {
        "start" : 1609725744624,
        "stop" : 1609725744754,
        "duration" : 130
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "51f1a366c5ed2804.json",
  "parameterValues" : [ "{'用例ID': 'test012', '模块': '报表管理', '接口名称': '日报表查询', '请求URL': '/action.ashx?action=GetReportName', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'JSON', '请求参数': '{\"Inputs\":\"{UserName:\\'admin\\',DateTime:\\'2020.09.01\\',Unite:1}\"}', '预期结果': \"(日报表)test182020-09-01', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 0, 'Total': 16}\", '实际结果': '', '是否运行': 'y', 'headers': '', 'cookies': '', '返回状态码': '200', '数据库验证': '', '备注': ''}" ]
}