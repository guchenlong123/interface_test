{"name": "test016首页跳转至第二页", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcase.Test_excel_case.TestExcel object at 0x0000008AB05A6160>\ncase = {'cookies': '', 'headers': '', '前置条件': '', '备注': '', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n        # 3、重构函数内容\n        data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例key获取values\n        url = ConfigYaml().get_conf_url() + case[data_key.url]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        status_code = case[data_key.status_code]\n        db_verify = case[data_key.db_verify]\n    \n        # 2）.接口请求\n        request = Request()\n        # params 转义json\n        # 验证params有没有内容\n        if len(str(params).strip()) is not 0:\n            params = json.loads(params)\n        # headers 转义json\n        # 验证headers有没有内容\n        if len(str(headers).strip()) is not 0:\n            headers = json.loads(headers)\n        # cookies 转义json\n        # 验证cookies有没有内容\n        if len(str(cookies).strip()) is not 0:\n            cookies = json.loads(cookies)\n    \n        # method post/get\n        if str(method).lower() == \"get\":\n            res = request.get(url, data=params, headers=headers, cookies=cookies)\n    \n        elif str(method).lower() == \"post\":\n            res = request.post(url, data=params, headers=headers, cookies=cookies)\n    \n        else:\n            res = log.error(\"错误请求method: %s\" % method)\n        print(res)\n    \n        # allure\n        # sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        # 模块   story 二级标签\n        allure.dynamic.story(case_model)\n        # 用例ID+接口名称  title\n        allure.dynamic.title(case_id + case_name)\n        # 请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(url, method, expect_result, res)\n        allure.dynamic.description(desc)\n    \n        # 断言验证\n        # 状态码，返回结果内容，数据库相关的结果的验证\n        # 状态码\n        assert_util = AssertUtil()\n        assert_util.assert_code(res[\"code\"], status_code)\n    \n        # 返回结果内容\n>       assert_util.assert_in_body(str(res[\"body\"]), str(expect_result))\n\nTest_excel_case.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUtil.AssertUtil object at 0x0000008AB0872208>\nbody = \"{'ActionInfo': {'ErrorCode': 0, 'Success': True, 'ExceptionMsg': None, 'ActionName': None, 'ActionUser': None, 'Actio... {'Id': 27, 'CName': 'test15', 'Desp': '', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 2, 'Total': 15}}\"\nexpected_body = \"PageInfo': {'Current': 2, 'Total': 16}\"\n\n    def assert_in_body(self, body, expected_body):\n        \"\"\"\n        验证返回结果是否包含期望的结果\n        :param body:\n        :param expected_body:\n        :return:\n        \"\"\"\n        try:\n            body = str(body)\n            # print(body)\n>           assert expected_body in body\nE           AssertionError\n\n..\\utils\\AssertUtil.py:54: AssertionError"}, "description": "<font color='red'>请求URL: </font> http://192.168.40.234:5000/action.ashx?action=GetReportInfo<Br/><font color='red'>请求类型: </font>POST<Br/><font color='red'>期望结果: </font>PageInfo': {'Current': 2, 'Total': 16}<Br/><font color='red'>实际结果: </font>{'code': 200, 'body': {'ActionInfo': {'ErrorCode': 0, 'Success': True, 'ExceptionMsg': None, 'ActionName': None, 'ActionUser': None, 'ActionTime': '/Date(1609726730799+0800)/', 'LogType': 0, 'ActionDateTime': '/Date(1609726730814+0800)/', 'ActionModel': None, 'LogParams': None, 'FunctionPoint': None}, 'ReportList': [{'Id': 23, 'CName': 'test11', 'Desp': '', 'ReportType': 1, 'RoleNo': None}, {'Id': 24, 'CName': 'test12', 'Desp': '', 'ReportType': 1, 'RoleNo': None}, {'Id': 25, 'CName': 'test13', 'Desp': '', 'ReportType': 1, 'RoleNo': None}, {'Id': 26, 'CName': 'test14', 'Desp': '', 'ReportType': 1, 'RoleNo': None}, {'Id': 27, 'CName': 'test15', 'Desp': '', 'ReportType': 1, 'RoleNo': None}], 'PageInfo': {'Current': 2, 'Total': 15}}}", "attachments": [{"name": "log", "source": "96dd09b9-40a9-4f7f-9b8f-586ed9d388c9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例ID': 'test016', '模块': '报表管理', '接口名称': '首页跳转至第二页', '请求URL': '/action.ashx?action=GetReportInfo', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'JSON', '请求参数': '{\"Inputs\":\"{CName:\\'\\',PageCurrent:2,PageSize:10,UserName:\\'admin\\'}\"}', '预期结果': \"PageInfo': {'Current': 2, 'Total': 16}\", '实际结果': '', '是否运行': 'y', 'headers': '', 'cookies': '', '返回状态码': '200', '数据库验证': '', '备注': ''}"}], "start": 1609726730768, "stop": 1609726730815, "uuid": "fda3fdde-ebdd-4c4a-95e4-7d375dc68184", "historyId": "e706a64b13976fafa961b705e7c0a0d5", "testCaseId": "176a395706fb4b05023f7d4a803f48c1", "fullName": "testcase.Test_excel_case.TestExcel#test_run", "labels": [{"name": "feature", "value": "IMS前台接口自动化测试"}, {"name": "story", "value": "报表管理"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "Test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "IMSIMS"}, {"name": "thread", "value": "11724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Test_excel_case"}]}